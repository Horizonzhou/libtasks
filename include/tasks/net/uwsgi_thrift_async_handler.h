/*
 * Copyright (c) 2013-2014 ADTECH GmbH
 * Licensed under MIT (https://github.com/adtechlabs/libtasks/blob/master/COPYING)
 *
 * Author: Andreas Pohl
 */

#ifndef _UWSGI_THRIFT_ASYNC_HANDLER_H_
#define _UWSGI_THRIFT_ASYNC_HANDLER_H_

#include <tasks/net/uwsgi_task.h>
#include <string>
#include <functional>
#include <memory>

namespace tasks {
namespace net {

/// The base class for asynchronous thrift handlers. The two template arguments have to match the thrift generated
/// types. A handler also has to implement a service and a service_name method. See below.
template <class thrift_result_type,  // generated by thrift
          class thrift_args_type>    // generated by thrift
class uwsgi_thrift_async_handler : public tasks::error_base {
  public:
    using handler_finish_func_t = std::function<void()>;
    using result_t = thrift_result_type;
    using args_t = thrift_args_type;

  private:
    result_t m_result;
    uwsgi_task* m_uwsgi_task = nullptr;
    handler_finish_func_t m_finish_func;

  protected:
    /// \return A reference to the underlying request object.
    inline const uwsgi_request& request() const { return m_uwsgi_task->request(); }

    /// \return A pointer to the underlying request onject.
    inline const uwsgi_request* request_p() const { return m_uwsgi_task->request_p(); }

    /// \return A reference to the underlying response object.
    inline http_response& response() { return m_uwsgi_task->response(); }

    /// \return A pointer to the underlying response onject.
    inline http_response* response_p() { return m_uwsgi_task->response_p(); }

    /// Async handlers call this method to trigger the processor callback.
    inline void finish() { m_finish_func(); }

    /// Report an error.
    inline void set_error(std::string msg) {
        tasks_exception e(tasks_error::UWSGI_THRIFT_HANDLER, msg);
        set_exception(e);
    }

  public:
    virtual ~uwsgi_thrift_async_handler() {}

    /// The service method will be called by the processor after a new thrift message has been deserialized.
    ///
    /// \param args A pointer to the arguments of the thrift service method.
    virtual void service(std::shared_ptr<args_t> args) = 0;

    /// \return The name of the thrift service. This name has to match the name in the thrift IDL. Look at the uwsgi
    /// async test for an example.
    virtual std::string service_name() const = 0;

    /// Return a reference to the thrift result base object.
    inline result_t& result_base() { return m_result; }

    /// Return a reference to the thrift result object. A thrift handler uses this to return data.
    inline auto result() -> decltype((m_result.success)) { return m_result.success; }

    /// The \link uwsgi_thrift_async_processor \endlink uses this method to assign the underlying uwsgi_task object.
    inline void set_uwsgi_task(uwsgi_task* t) { m_uwsgi_task = t; }

    /// Set a finish callback. This is used by the \link uwsgi_thrift_async_processor \endlink to get notified when an
    /// async operation has finished and the thrift result set can be send back to the caller.
    ///
    /// \param f The callback function
    inline void on_finish(handler_finish_func_t f) { m_finish_func = f; }
};

}  // net
}  // tasks

#endif  // _UWSGI_THRIFT_ASYNC_HANDLER_H_
